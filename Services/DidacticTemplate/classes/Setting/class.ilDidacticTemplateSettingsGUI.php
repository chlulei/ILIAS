<?php

declare(strict_types=1);
/**
 * This file is part of ILIAS, a powerful learning management system
 * published by ILIAS open source e-Learning e.V.
 *
 * ILIAS is licensed with the GPL-3.0,
 * see https://www.gnu.org/licenses/gpl-3.0.en.html
 * You should have received a copy of said license along with the
 * source code, too.
 *
 * If this is not the case or you just want to try ILIAS, you'll find
 * us at:
 * https://www.ilias.de
 * https://github.com/ILIAS-eLearning
 *
 *********************************************************************/

use ILIAS\HTTP\GlobalHttpState;
use ILIAS\Refinery\Factory;

use ILIAS\UI\Factory as UIFactory;
use ILIAS\UI\Renderer as UIRenderer;
use ILIAS\UI\Component\Input\Container\Form\Standard as StandardForm;
use ILIAS\UI\Component\MessageBox\MessageBox;
use ILIAS\FileUpload\MimeType as MimeType;

/**
 * Settings for a single didactic template
 * @author            Stefan Meyer <meyer@leifos.com>
 * @ingroup           ServicesDidacticTemplate
 * @ilCtrl_IsCalledBy ilDidacticTemplateSettingsGUI: ilObjRoleFolderGUI
 * @ilCtrl_Calls      ilDidacticTemplateSettingsGUI: ilMultilingualismGUI, ilPropertyFormGUI, ilObjFileUploadHandlerGUI
 */
class ilDidacticTemplateSettingsGUI
{
    private ilLogger $logger;
    private ilLanguage $lng;
    private ilRbacSystem $rbacsystem;
    private ilCtrl $ctrl;
    private ilAccessHandler $access;
    private ilToolbarGUI $toolbar;
    private ilObjectDefinition $objDefinition;
    private GlobalHttpState $http;
    private Factory $refinery;
    private ilGlobalTemplateInterface $tpl;
    private ilTabsGUI $tabs;

    private UIRenderer $renderer;
    private UIFactory $uiFactory;
    private ilTree $repositoryTree;

    private int $ref_id;

    public function __construct()
    {
        global $DIC;

        $this->lng = $DIC->language();
        $this->rbacsystem = $DIC->rbac()->system();
        $this->ctrl = $DIC->ctrl();
        $this->objDefinition = $DIC['objDefinition'];
        $this->access = $DIC->access();
        $this->toolbar = $DIC->toolbar();
        $this->http = $DIC->http();
        $this->refinery = $DIC->refinery();
        $this->logger = $DIC->logger()->otpl();
        $this->tpl = $DIC->ui()->mainTemplate();
        $this->tabs = $DIC->tabs();

        $this->renderer = $DIC->ui()->renderer();
        $this->uiFactory = $DIC->ui()->factory();
        $this->repositoryTree = $DIC->repositoryTree();
    }

    protected function initReferenceFromRequest(): void
    {
        if ($this->http->wrapper()->query()->has('ref_id')) {
            $this->ref_id = $this->http->wrapper()->query()->retrieve(
                'ref_id',
                $this->refinery->kindlyTo()->int()
            );
        }
    }

    /**
     * transforms selected tpls from post to SplFixedArray
     */
    protected function initTemplatesFromRequest(): SplFixedArray
    {
        if ($this->http->wrapper()->post()->has('tpls')) {
            return SplFixedArray::fromArray(
                $this->http->wrapper()->post()->retrieve(
                    'tpls',
                    $this->refinery->kindlyTo()->listOf(
                        $this->refinery->kindlyTo()->int()
                    )
                )
            );
        }

        return new SplFixedArray(0);
    }

    protected function initTemplateFromRequest(): ?ilDidacticTemplateSetting
    {
        if ($this->http->wrapper()->query()->has('tplid')) {
            $tpl_id = $this->http->wrapper()->query()->retrieve(
                'tplid',
                $this->refinery->kindlyTo()->int()
            );
            return new ilDidacticTemplateSetting($tpl_id);
        }

        return null;
    }

    public function executeCommand(): string
    {
        $this->initReferenceFromRequest();

        $next_class = $this->ctrl->getNextClass($this);
        $cmd = $this->ctrl->getCmd();

        switch ($next_class) {
            /** @noinspection PhpMissingBreakStatementInspection */
            case "ilpropertyformgui":
                $setting = $this->initTemplateFromRequest();
                if (!$setting instanceof ilDidacticTemplateSetting) {
                    $setting = new ilDidacticTemplateSetting();
                }
                $standardForm = $this->initEditTemplate($setting);
                $this->ctrl->forwardCommand($standardForm);
                // no break
            case 'ilmultilingualismgui':
                $setting = $this->initTemplateFromRequest();
                if (
                    !$this->access->checkAccess('write', '', $this->ref_id) ||
                    !$setting instanceof ilDidacticTemplateSetting ||
                    $setting->isAutoGenerated()) {
                    $this->ctrl->redirect($this, "overview");
                }
                $this->setEditTabs("settings_trans");

                $transgui = new ilMultilingualismGUI($setting->getId(), 'dtpl');
                $defaultl = $setting->getTranslationObject()->getDefaultLanguage();
                $transgui->setStartValues(
                    $setting->getPresentationTitle($defaultl),
                    $setting->getPresentationDescription($defaultl)
                );
                $this->ctrl->forwardCommand($transgui);
                break;
            default:
                if (!$cmd) {
                    $cmd = 'overview';
                }
                $this->$cmd();
                break;
        }
        return '';
    }

    protected function overview(MessageBox $messageBox = null): void
    {
        if ($this->rbacsystem->checkAccess('write', $this->ref_id)) {
            $this->toolbar->addComponent($this->uiFactory->button()->standard(
                $this->lng->txt('didactic_import_btn'),
                $this->ctrl->getLinkTarget($this, 'showImportForm')
            ));
        }

        $filter = new ilDidacticTemplateSettingsTableFilter($this->ctrl->getFormAction($this, 'overview'));
        $filter->init();

        $table = new ilDidacticTemplateSettingsTableGUI($this, 'overview', $this->ref_id);
        $table->init();
        $table->parse($filter);

        $messageBoxRender = is_null($messageBox) ? '' : $this->renderer->render($messageBox);
        $this->tpl->setContent(
            $messageBoxRender . $filter->render() . $table->getHTML()
        );
    }

    public function applyFilter(): void
    {
        $table = new ilDidacticTemplateSettingsTableGUI($this, 'overview', $this->ref_id);
        $table->init();
        $table->resetOffset();
        $table->writeFilterToSession();
        $this->overview();
    }

    public function resetFilter(): void
    {
        $table = new ilDidacticTemplateSettingsTableGUI($this, 'overview', $this->ref_id);
        $table->init();
        $table->resetOffset();
        $table->resetFilter();
        $this->overview();
    }

    protected function showImportForm(): void
    {
        $setting = $this->initTemplateFromRequest();
        if ($setting instanceof ilDidacticTemplateSetting) {
            $this->setEditTabs('import');
        } else {
            $this->tabs->clearTargets();
            $this->tabs->setBackTarget(
                $this->lng->txt('didactic_back_to_overview'),
                $this->ctrl->getLinkTarget($this, 'overview')
            );
        }
        $this->ctrl->clearParameterByClass(get_class($this), 'tplid');
        $this->tpl->setContent($this->renderer->render($this->createImportForm()));
    }

    protected function createImportForm(): StandardForm
    {
        $fileXML = $this->uiFactory->input()->field()->file(
            new ilDidacticTemplateXmlFileHandlerGUI(),
            $this->lng->txt('import_file')
        )
                ->withAcceptedMimeTypes([ MimeType::TEXT__XML ])
                ->withMaxFileSize((int)ilFileUtils::getUploadSizeLimitBytes())
                ->withRequired(true);
        $fileIcon = $this->uiFactory->input()->field()->file(
            new ilDidacticTemplateImageHandlerGUI(),
            $this->lng->txt('icon'),
            $this->lng->txt('didactic_icon_info')
        )
                ->withAcceptedMimeTypes([ MimeType::IMAGE__SVG_XML ])
                ->withMaxFileSize((int)ilFileUtils::getUploadSizeLimitBytes());

        $importSection = $this->uiFactory->input()->field()->section(
            [
                    'xml_file' => $fileXML,
                    'icon_file' => $fileIcon
                ],
            $this->lng->txt('didactic_import_table_title')
        );
        $postUrl = $this->ctrl->getLinkTargetByClass(get_class($this), 'importTemplate');
        $outputFormatter = $this->refinery->custom()->transformation(function ($v) {
            return is_null($v[0]) ? [] : $v[0];
        });
        return $this->uiFactory->input()->container()->form()->standard(
            $postUrl,
            [ $importSection ]
        )
            ->withAdditionalTransformation($outputFormatter)
            ->withSubmitCaption($this->lng->txt('import'));
    }

    protected function importTemplate(): void
    {
        if (!$this->access->checkAccess('write', '', $this->ref_id)) {
            $this->ctrl->redirect($this, "overview");
        }

        $msgBoxDisplayed = $this->uiFactory->messageBox()->success($this->lng->txt('didactic_import_success'));

        $setting = $this->initTemplateFromRequest();
        $settingsExist = $setting instanceof ilDidacticTemplateSetting;

        $request = $this->http->request();
        $standardForm = ($settingsExist ? $this->editImportForm() : $this->createImportForm())->withRequest($request);
        $formData = $standardForm->getData();

        if(is_null($formData)) {
            $this->editTemplate($standardForm, $this->uiFactory->messageBox()->failure($this->lng->txt('didactic_import_failed')));
            return;
        }

        $xmlFileIdentifier = $formData['xml_file'][0] ?? '';
        $iconIdentifier = $formData['icon_file'][0] ?? '';

        $import = new ilDidacticTemplateImport(ilDidacticTemplateImport::IMPORT_FILE);
        $import->setInputFileIdentifier($xmlFileIdentifier);

        try {
            $importSettings = $import->import();
            if ($setting instanceof ilDidacticTemplateSetting) {
                $this->editImport($importSettings);
            } elseif ($importSettings->hasIconSupport($this->objDefinition)) {
                $importSettings->getIconHandler()->updateIconIdentifier($iconIdentifier);
                $importSettings->update();
            }
        } catch (ilDidacticTemplateImportException $e) {
            $this->logger->error('Import failed with message: ' . $e->getMessage());
            $msgBoxDisplayed = $this->uiFactory->messageBox()->failure($this->lng->txt('didactic_import_failed') . ': ' . $e->getMessage());
        }

        // Xml file no longer needed -> deleting file.
        $import->deleteXmlFile();

        if ($setting instanceof ilDidacticTemplateSetting) {
            $this->ctrl->setParameter($this, 'tplid', $setting->getId());
            $this->editTemplate(null, $msgBoxDisplayed);
        } else {
            $this->overview($msgBoxDisplayed);
        }
    }

    protected function editTemplate(StandardForm $standardForm = null, MessageBox $messageBox = null): void
    {
        $setting = $this->initTemplateFromRequest();
        $this->setEditTabs("edit");
        $this->ctrl->saveParameter($this, 'tplid');
        if (!$standardForm instanceof StandardForm) {
            $standardForm = $this->initEditTemplate($setting);
        }

        $items = is_null($messageBox) ? array(
            $standardForm
        ) : array(
            $messageBox,
            $standardForm
        );
        $this->tpl->setContent($this->renderer->render($items));
    }

    protected function updateTemplate(): void
    {
        $setting = $this->initTemplateFromRequest();
        $this->ctrl->saveParameter($this, 'tplid');

        if (!$this->access->checkAccess('write', '', $this->ref_id)) {
            $this->ctrl->redirect($this, "overview");
        }

        $request = $this->http->request();
        $standardForm = $this->initEditTemplate($setting)->withRequest($request);
        $formData = $standardForm->getData();

        if(is_null($formData)) {
            $this->editTemplate($standardForm);
            return;
        }

        if (count($setting->getTranslationObject()->getLanguages())) {
            $setting->getTranslationObject()->setDefaultTitle($formData['title']);
            $setting->getTranslationObject()->setDefaultDescription($formData['description']);
            $setting->getTranslationObject()->save();
        }

        if (!$setting->isAutoGenerated()) {
            $setting->setTitle($formData['title']);
            $setting->setDescription($formData['description']);
        }

        if (!$setting->isAutoGenerated()) {
            $setting->setAssignments([$formData['type']]);
        }

        $categoryRefIds = [];
        if (!is_null($formData['local_template'])) {
            $refIds = explode(';', $formData['local_template']['application_scope_input']);
            foreach($refIds as $refId) {
                if($refId === '') {
                    continue;
                }
                $categoryRefIds[] = $refId;
            }
            $setting->setEffectiveFrom(explode(';', $formData['local_template']['application_scope_input']));
        }

        $setting->setEffectiveFrom($categoryRefIds);
        $setting->setExclusive((bool) $formData['exclusive_template']);
        $setting->setInfo($formData['info']);
        $setting->enable((bool) $formData['enable']);
        $setting->getIconHandler()->updateIconIdentifier($formData['icon_file'][0] ?? '');
        $setting->update();

        $this->overview($this->uiFactory->messageBox()->success($this->lng->txt('settings_saved')));
    }

    protected function initEditTemplate(ilDidacticTemplateSetting $set): StandardForm
    {
        $translations = $set->getTranslations();
        $default = count($translations) > 0 ? $translations[0] : null;
        $languages = ilMDLanguageItem::_getLanguages();
        $translationsInfo = count($translations) <= 1 ? '' :
                $this->lng->txt("language")
                . ": "
                . $languages[$default["lang_code"]]
                . ' <a href="'
                . $this->ctrl->getLinkTargetByClass("ilmultilingualismgui", "listTranslations")
                . '">&raquo; '
                . $this->lng->txt("more_translations")
                . '</a>';
        $textInputFieldTitleValue = $set->isAutoGenerated() ? $set->getPresentationTitle() : $default["title"] ?? '';
        $textInputFieldTitle = $this->uiFactory->input()->field()->text(
            $this->lng->txt('title')
        )
                ->withRequired(true)
                ->withDisabled($set->isAutoGenerated())
                ->withValue($textInputFieldTitleValue)
                ->withByline($translationsInfo);

        $textInputAreaDescriptionValue = $set->isAutoGenerated() ? $set->getPresentationDescription() : $default["description"] ?? '';
        $textInputAreaDescription = $this->uiFactory->input()->field()->textarea(
            $this->lng->txt('description')
        )
                ->withDisabled($set->isAutoGenerated())
                ->withValue($textInputAreaDescriptionValue);

        $fileUploadIcon = $this->uiFactory->input()->field()->file(
            new ilDidacticTemplateImageHandlerGUI($set->getIconIdentifier()),
            $this->lng->txt('didactic_icon'),
            $this->lng->txt('didactic_icon_info')
        )
                ->withAcceptedMimeTypes([ MimeType::IMAGE__SVG_XML ])
                ->withMaxFileSize((int) ilFileUtils::getUploadSizeLimitBytes());

        $inputAreaGeneralInfo = $this->uiFactory->input()->field()->textarea(
            $this->lng->txt('didactic_install_info')
        )
                ->withValue($set->getInfo());

        $checkboxIsActive = $this->uiFactory->input()->field()->checkbox(
            $this->lng->txt('active')
        )
                ->withValue($set->isEnabled());

        $options = [];
        $subs = $this->objDefinition->getSubObjectsRecursively('root', false);
        foreach (array_merge($subs, ['fold' => 1]) as $obj => $null) {
            ilLoggerFactory::getLogger('root')->dump($null);
            if ($this->objDefinition->isPlugin($obj)) {
                $options[$obj] = ilObjectPlugin::lookupTxtById($obj, "obj_" . $obj);
            } elseif ($this->objDefinition->isAllowedInRepository($obj)) {
                $options[$obj] = $this->lng->txt('obj_' . $obj);
            }
        }
        asort($options);
        $selectObjectType = $this->uiFactory->input()->field()->select(
            $this->lng->txt('obj_type'),
            $options
        )
                ->withRequired(true)
                ->withValue($set->getAssignments()[0] ?? '')
                ->withByline($this->lng->txt('dtpl_obj_type_info'));

        // Test if ref_ids in repo tree and of type ilContainer.
        $validRefIds = $this->refinery->custom()->constraint(function ($v) {
            if($v === '') {
                return true;
            }
            $refIds = explode(';', $v);
            foreach($refIds as $refId) {
                if(!$this->repositoryTree->isInTree((int) $refId)) {
                    return false;
                }
                $objectWithRefId = ilObjectFactory::getInstanceByRefId((int) $refId);
                if(!($objectWithRefId instanceof ilContainer)) {
                    return false;
                }
            }
            return true;
        }, $this->lng->txt('didactic_input_scope_error_invalid_ref_id'));
        // Test if duplicate ref_ids are in input.
        $duplicatedRefIds = $this->refinery->custom()->constraint(function ($v) {
            $refIds = explode(';', $v);
            $occurrences = array_count_values($refIds);
            foreach($occurrences as $count) {
                if(((int) $count) > 1) {
                    return false;
                }
            }
            return true;
        }, $this->lng->txt('didactic_input_scope_error_duplicate_ref_id'));
        // Test if input pattern is correct.
        $validScopeInput = $this->refinery->custom()->constraint(function ($v) {
            return preg_match("/^([0-9]+(;[0-9]+)*)*$/", $v) === 1;
        }, $this->lng->txt('didactic_input_scope_error_invalid_input'));
        $textScopeOfApplication = $this->uiFactory->input()->field()->text(
            $this->lng->txt("effective_form")
        )
                ->withAdditionalTransformation($validScopeInput)
                ->withAdditionalTransformation($validRefIds)
                ->withAdditionalTransformation($duplicatedRefIds)
                ->withValue(implode(';', $set->getEffectiveFrom()))
                ->withByline($this->lng->txt('didactic_expected_input_scope'));
        $optionalGroupScopeOfApplication = $this->uiFactory->input()->field()->optionalGroup(
            [
                    'application_scope_input' => $textScopeOfApplication
                ],
            $this->lng->txt("activate_local_didactic_template"),
            $this->lng->txt("activate_local_didactic_template_info")
        );

        $checkboxGreyOut = $this->uiFactory->input()->field()->checkbox(
            $this->lng->txt("activate_exclusive_template")
        )
                ->withValue($set->isExclusive())
                ->withByline($this->lng->txt("activate_exclusive_template_info"));

        $editSectionInputs = $set->isAutoGenerated() ?
                [
                    'title' => $textInputFieldTitle,
                    'description' => $textInputAreaDescription,
                    'icon_file' => $fileUploadIcon,
                    'info' => $inputAreaGeneralInfo,
                    'enable' => $checkboxIsActive
                ] : [
                    'title' => $textInputFieldTitle,
                    'description' => $textInputAreaDescription,
                    'icon_file' => $fileUploadIcon,
                    'info' => $inputAreaGeneralInfo,
                    'enable' => $checkboxIsActive,
                    'type' => $selectObjectType,
                    'local_template' => $optionalGroupScopeOfApplication,
                    'exclusive_template' => $checkboxGreyOut
                ];
        $editSection = $this->uiFactory->input()->field()->section(
            $editSectionInputs,
            $this->lng->txt('didactic_edit_tpl')
        );

        $postUrl = $this->ctrl->getLinkTargetByClass(get_class($this), 'updateTemplate');
        $outputFormatter = $this->refinery->custom()->transformation(function ($v) {
            return $v[0];
        });
        return $this->uiFactory->input()->container()->form()->standard(
            $postUrl,
            [ $editSection ]
        )
            ->withSubmitCaption($this->lng->txt('save'))
            ->withAdditionalTransformation($outputFormatter);
    }

    protected function copyTemplate(): void
    {
        if (!$this->access->checkAccess('write', '', $this->ref_id)) {
            $this->ctrl->redirect($this, "overview");
        }

        $setting = $this->initTemplateFromRequest();
        if (!$setting instanceof ilDidacticTemplateSetting) {
            $this->overview($this->uiFactory->messageBox()->failure($this->lng->txt('select_one')));
            return;
        }
        $copier = new ilDidacticTemplateCopier($setting->getId());
        $copier->start();

        $this->overview($this->uiFactory->messageBox()->success($this->lng->txt('didactic_copy_suc_message')));
    }

    protected function exportTemplate(): void
    {
        $setting = $this->initTemplateFromRequest();
        if (!$setting instanceof ilDidacticTemplateSetting) {
            $msgBoxFailure = $this->uiFactory->messageBox()->failure($this->lng->txt('select_one'));
            $this->overview($msgBoxFailure);
            return;
        }
        $writer = new ilDidacticTemplateXmlWriter($setting->getId());
        $writer->write();

        ilUtil::deliverData(
            $writer->xmlDumpMem(true),
            $writer->getSetting()->getTitle() . '.xml',
            'application/xml'
        );
    }

    protected function confirmDelete(): void
    {
        $templates = $this->initTemplatesFromRequest();
        if (0 === count($templates)) {
            $this->overview($this->uiFactory->messageBox()->failure($this->lng->txt('select_one')));
            return;
        }

        $confirm = new ilConfirmationGUI();
        $confirm->setHeaderText($this->lng->txt('didactic_confirm_delete_msg'));
        $confirm->setFormAction($this->ctrl->getFormAction($this));
        $confirm->setConfirm($this->lng->txt('delete'), 'deleteTemplates');
        $confirm->setCancel($this->lng->txt('cancel'), 'overview');

        $forbidden = [];
        foreach ($templates as $tplid) {
            $tpl = new ilDidacticTemplateSetting((int) $tplid);

            if (!$tpl->isAutoGenerated()) {
                $confirm->addItem('tpls[]', (string) $tpl->getId(), $tpl->getPresentationTitle());
            } else {
                $forbidden[] = $tpl->getId();
            }
        }

        $messageBoxes = [];
        if (count($forbidden) > 0 && count($templates) === 1) {
            $this->overview($this->uiFactory->messageBox()->failure($this->lng->txt('didactic_cannot_delete_auto_generated')));
            return;
        } elseif (count($forbidden) > 0 && count($templates) > 1) {
            $messageBoxes[] = $this->uiFactory->messageBox()->info($this->lng->txt('didactic_cannot_delete_auto_generated_confirmation'));
        }
        $this->tpl->setContent($this->renderer->render($messageBoxes) . $confirm->getHTML());
    }

    protected function deleteTemplates(): void
    {
        if (!$this->access->checkAccess('write', '', $this->ref_id)) {
            $this->ctrl->redirect($this, "overview");
        }
        $templates = $this->initTemplatesFromRequest();
        if (0 === count($templates)) {
            $this->overview($this->uiFactory->messageBox()->failure($this->lng->txt('select_one')));
            return;
        }

        foreach ($templates as $tplid) {
            $tpl = new ilDidacticTemplateSetting((int) $tplid);
            $tpl->delete();
        }

        $this->overview($this->uiFactory->messageBox()->success($this->lng->txt('didactic_delete_msg')));
    }

    protected function activateTemplates(): void
    {
        if (!$this->access->checkAccess('write', '', $this->ref_id)) {
            $this->ctrl->redirect($this, "overview");
        }
        $templates = $this->initTemplatesFromRequest();
        if (0 === count($templates)) {
            $msgBoxFailure = $this->uiFactory->messageBox()->failure($this->lng->txt('select_one'));
            $this->overview($msgBoxFailure);
            return;
        }

        foreach ($templates as $tplid) {
            $tpl = new ilDidacticTemplateSetting((int) $tplid);
            $tpl->enable(true);
            $tpl->update();
        }

        $msgBoxSuccess = $this->uiFactory->messageBox()->success($this->lng->txt('didactic_activated_msg'));
        $this->overview($msgBoxSuccess);
    }

    protected function deactivateTemplates(): void
    {
        if (!$this->access->checkAccess('write', '', $this->ref_id)) {
            $this->ctrl->redirect($this, "overview");
        }

        $templates = $this->initTemplatesFromRequest();
        if (0 === count($templates)) {
            $msgBoxFailure = $this->uiFactory->messageBox()->failure($this->lng->txt('select_one'));
            $this->overview($msgBoxFailure);
        }
        foreach ($templates as $tplid) {
            $tpl = new ilDidacticTemplateSetting((int) $tplid);
            $tpl->enable(false);
            $tpl->update();
        }
        $msgBoxSuccess = $this->uiFactory->messageBox()->success($this->lng->txt('didactic_deactivated_msg'));
        $this->overview($msgBoxSuccess);
    }

    protected function setEditTabs(string $a_tab_active = "edit"): void
    {
        $setting = $this->initTemplateFromRequest();
        $this->lng->loadLanguageModule('obj');
        $this->tabs->clearTargets();
        $this->tabs->setBackTarget(
            $this->lng->txt('didactic_back_to_overview'),
            $this->ctrl->getLinkTarget($this, 'overview')
        );
        $this->ctrl->saveParameter($this, "tplid");

        if(!($setting instanceof ilDidacticTemplateSetting && $setting->isAutoGenerated())) {
            return;
        }

        $this->tabs->addTab('edit', $this->lng->txt('settings'), $this->ctrl->getLinkTarget($this, 'editTemplate'));
        $this->tabs->addTab(
            'import',
            $this->lng->txt('import'),
            $this->ctrl->getLinkTarget($this, 'showEditImportForm')
        );

        if (in_array($a_tab_active, ['edit', 'settings_trans'])) {
            $this->tabs->addSubTab(
                'edit',
                $this->lng->txt('settings'),
                $this->ctrl->getLinkTarget($this, 'editTemplate')
            );
            $this->tabs->addSubTab(
                'settings_trans',
                $this->lng->txt("obj_multilinguality"),
                $this->ctrl->getLinkTargetByClass(["ilmultilingualismgui"], 'listTranslations')
            );
            $this->tabs->activateTab('edit');
            $this->tabs->activateSubTab($a_tab_active);
        } else {
            $this->tabs->activateTab($a_tab_active);
        }
    }

    public function showEditImportForm(): void
    {
        $this->setEditTabs("import");
        $this->tpl->setContent($this->renderer->render($this->editImportForm()));
    }

    public function editImportForm(): StandardForm
    {
        $fileTemplate = $this->uiFactory->input()->field()->file(
            new ilDidacticTemplateXmlFileHandlerGUI(),
            $this->lng->txt('didactic_template_update_import'),
            $this->lng->txt('didactic_template_update_import_info')
        )
                ->withAcceptedMimeTypes([ MimeType::TEXT__XML ]) // Replace as soon as possible.
                ->withRequired(true);

        $importSectionElements = [ 'xml_file' => $fileTemplate ];
        $importSection = $this->uiFactory->input()->field()->section(
            $importSectionElements,
            $this->lng->txt('didactic_import_table_title')
        );

        $standardFormElements = [ $importSection ];
        $postUrl = $this->ctrl->getLinkTargetByClass(get_class($this), 'importTemplate');
        $outputFormatter = $this->refinery->custom()->transformation(function ($v) {
            return is_null($v[0]) ? [] : $v[0];
        });
        $standardForm = $this->uiFactory->input()->container()->form()->standard(
            $postUrl,
            $standardFormElements
        )
                ->withAdditionalTransformation($outputFormatter)
                ->withSubmitCaption($this->lng->txt('import'));
        return $standardForm;
    }

    public function editImport(ilDidacticTemplateSetting $a_settings): void
    {
        ilDidacticTemplateObjSettings::transferAutoGenerateStatus($a_settings->getId(), $a_settings->getId());
        $assignments = ilDidacticTemplateObjSettings::getAssignmentsByTemplateID($a_settings->getId());
        $a_settings->delete();
        foreach ($assignments as $obj) {
            ilDidacticTemplateObjSettings::assignTemplate($obj["ref_id"], $obj["obj_id"], $a_settings->getId());
        }
        $this->ctrl->setParameter($this, "tplid", $a_settings->getId());
    }
}
